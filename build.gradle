

plugins {
    id 'idea'
    id "dev.architectury.loom" version "1.3-SNAPSHOT"
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)




loom {
    silentMojangMappingsLicense()
    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
        mixinConfigs = [
                "${mod_id}.mixins.json"
        ]

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", mod_id
            programArgs "--output", file("src/generated/resources").absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
        }
    }

}
// Include resources generated by data generators.
    sourceSets.main.resources { srcDir 'src/generated/resources' }

    repositories {
        mavenCentral()
        maven {
            name 'FirstDarkDev'
            url "https://maven.firstdarkdev.xyz/snapshots/"
        }
        maven {
            name 'Quilt'
            url 'https://maven.quiltmc.org/repository/release/'
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            url "https://maven.saps.dev/releases/"
            content {
                includeGroup "dev.latvian.mods"
            }
        }
        maven { // Registrate
            url = "https://maven.tterrag.com/"
            content {
                // need to be specific here due to version overlaps
                includeGroup("com.tterrag.registrate")
            }
        }
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven {
            // Patchouli, JEI, Embeddium
            name = "BlameJared"
            url = "https://maven.blamejared.com/"
        }
        maven {
            url = "https://maven.theillusivec4.top/"
        }
        maven {
            // Curse Forge File
            url "https://cursemaven.com/"
            content {
                includeGroup "curse.maven"
            }
        }
        maven { // FTB Mods
            url "https://maven.saps.dev/releases"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.ftb.mods"
            }
        }
        maven {
            url "https://maven.saps.dev/snapshots"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.ftb.mods"
            }
        }
        maven {
            url "https://maven.ftb.dev/snapshots"
            content {
                includeGroup "dev.ftb.mods"
            }
        }
    }


    dependencies {

        minecraft "com.mojang:minecraft:${minecraft_version}"

        forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

        mappings loom.layered {
            it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_mappings}@zip")
            it.officialMojangMappings { nameSyntheticMembers = false }
        }

        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

        modImplementation("com.gregtechceu.gtceu:gtceu-forge-${project.minecraft_version}:${project.gtceu_version}") { transitive = false }
        modImplementation("com.lowdragmc.ldlib:ldlib-forge-${project.minecraft_version}:${project.ldlib_version}") { transitive = false }

        modImplementation("com.tterrag.registrate:Registrate:MC1.20-1.3.3")

        modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${rei_version}")
        modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-forge:${rei_version}")
        modImplementation("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")

        //modImplementation("org.embeddedt:embeddium-1.20.1:0.2.11-git.23aedfb+mc1.20.1")


        modRuntimeOnly("dev.toma.configuration:configuration-forge-1.20.1:2.2.0")

        implementation annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.3")
        implementation include("io.github.llamalad7:mixinextras-forge:0.3.3")

        compileOnly 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'
    }

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    processResources {
        def replaceProperties = [
                minecraft_version      : minecraft_version,
                minecraft_version_range: minecraft_version_range,
                forge_version          : forge_version, forge_version_range: forge_version_range,
                loader_version_range   : loader_version_range,
                mod_id                 : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                mod_author             : mod_author, mod_description: mod_description
        ]
        inputs.properties replaceProperties

        filesMatching("META-INF/mods.toml") {
            expand replaceProperties
        }
    }


// Example for how to get properties into the manifest for reading at runtime.
jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

